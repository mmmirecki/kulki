/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Algorytm.ts":
/*!*************************!*\
  !*** ./src/Algorytm.ts ***!
  \*************************/
/*! namespace exports */
/*! export Algorytm [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Algorytm\": () => /* binding */ Algorytm\n/* harmony export */ });\nvar Algorytm = /** @class */ (function () {\r\n    function Algorytm() {\r\n        this.toCheck = [];\r\n        this.path = [];\r\n        this.pathLength = 0;\r\n    }\r\n    Algorytm.prototype.log = function (board, target, destination) {\r\n        this.found = false;\r\n        this.pathExist = false;\r\n        this.pathLength = 0;\r\n        destination.num = 1000;\r\n        target.num = 0;\r\n        board.forEach(function (element) {\r\n            element.forEach(function (element2) {\r\n                if (!isNaN(element2.num) && element2.num != 1000 && element2 != target) {\r\n                    element2.num = undefined;\r\n                    element2.elem.style.backgroundColor = \"white\";\r\n                }\r\n            });\r\n        });\r\n        this.toCheck = [];\r\n        this.pathFind(board, target, destination);\r\n    };\r\n    Algorytm.prototype.pathFind = function (board, target, destination) {\r\n        //let algBoard = [target]\r\n        var currentElem = target;\r\n        //console.log(destination)\r\n        this.find(board, target, destination, target);\r\n        // board.forEach(element => {\r\n        //     element.forEach(element2 => {\r\n        //         element2.num = 0\r\n        //     });\r\n        // });\r\n    };\r\n    Algorytm.prototype.find = function (board, elem, destination, target) {\r\n        var _this = this;\r\n        this.toCheck.shift();\r\n        this.path = [];\r\n        //console.log(elem)\r\n        if (elem) {\r\n            //console.log(this.found)\r\n            if (this.found) {\r\n                console.log(\"znalezione\");\r\n                this.toCheck = [];\r\n                this.pathExist = true;\r\n            }\r\n            else {\r\n                if (board[elem.x + 1] != undefined) {\r\n                    if (board[elem.x + 1][elem.y].num == undefined && board[elem.x + 1][elem.y].num != NaN) {\r\n                        this.toCheck.push(board[elem.x + 1][elem.y]);\r\n                        board[elem.x + 1][elem.y].num = elem.num + 1;\r\n                    }\r\n                    else if (board[elem.x + 1][elem.y].num == 1000) {\r\n                        this.found = true;\r\n                        destination.num = elem.num + 1;\r\n                    }\r\n                }\r\n                if (board[elem.x - 1] != undefined && board[elem.x - 1][elem.y].num != NaN) {\r\n                    if (board[elem.x - 1][elem.y].num == undefined) {\r\n                        this.toCheck.push(board[elem.x - 1][elem.y]);\r\n                        board[elem.x - 1][elem.y].num = elem.num + 1;\r\n                    }\r\n                    else if (board[elem.x - 1][elem.y].num == 1000) {\r\n                        this.found = true;\r\n                        destination.num = elem.num + 1;\r\n                    }\r\n                }\r\n                if (board[elem.x][elem.y + 1] != undefined && board[elem.x][elem.y + 1].num != NaN) {\r\n                    if (board[elem.x][elem.y + 1].num == undefined) {\r\n                        this.toCheck.push(board[elem.x][elem.y + 1]);\r\n                        board[elem.x][elem.y + 1].num = elem.num + 1;\r\n                    }\r\n                    else if (board[elem.x][elem.y + 1].num == 1000) {\r\n                        this.found = true;\r\n                        destination.num = elem.num + 1;\r\n                    }\r\n                }\r\n                if (board[elem.x][elem.y - 1] != undefined && board[elem.x][elem.y - 1].num != NaN) {\r\n                    if (board[elem.x][elem.y - 1].num == undefined) {\r\n                        this.toCheck.push(board[elem.x][elem.y - 1]);\r\n                        board[elem.x][elem.y - 1].num = elem.num + 1;\r\n                    }\r\n                    else if (board[elem.x][elem.y - 1].num == 1000) {\r\n                        this.found = true;\r\n                        destination.num = elem.num + 1;\r\n                    }\r\n                }\r\n                this.toCheck.forEach(function (elem) {\r\n                    if (board[elem.x + 1] != undefined && board[elem.x + 1][elem.y].num != NaN) {\r\n                        if (board[elem.x + 1][elem.y].num == undefined) {\r\n                            _this.toCheck.push(board[elem.x + 1][elem.y]);\r\n                            board[elem.x + 1][elem.y].num = elem.num + 1;\r\n                        }\r\n                        else if (board[elem.x + 1][elem.y].num == 1000) {\r\n                            _this.found = true;\r\n                            destination.num = elem.num + 1;\r\n                        }\r\n                    }\r\n                    if (board[elem.x - 1] != undefined && board[elem.x - 1][elem.y].num != NaN) {\r\n                        if (board[elem.x - 1][elem.y].num == undefined) {\r\n                            _this.toCheck.push(board[elem.x - 1][elem.y]);\r\n                            board[elem.x - 1][elem.y].num = elem.num + 1;\r\n                        }\r\n                        else if (board[elem.x - 1][elem.y].num == 1000) {\r\n                            _this.found = true;\r\n                            destination.num = elem.num + 1;\r\n                        }\r\n                    }\r\n                    if (board[elem.x][elem.y + 1] != undefined && board[elem.x][elem.y + 1].num != NaN) {\r\n                        if (board[elem.x][elem.y + 1].num == undefined) {\r\n                            _this.toCheck.push(board[elem.x][elem.y + 1]);\r\n                            board[elem.x][elem.y + 1].num = elem.num + 1;\r\n                        }\r\n                        else if (board[elem.x][elem.y + 1].num == 1000) {\r\n                            _this.found = true;\r\n                            destination.num = elem.num + 1;\r\n                        }\r\n                    }\r\n                    if (board[elem.x][elem.y - 1] != undefined && board[elem.x][elem.y - 1].num != NaN) {\r\n                        if (board[elem.x][elem.y - 1].num == undefined) {\r\n                            _this.toCheck.push(board[elem.x][elem.y - 1]);\r\n                            board[elem.x][elem.y - 1].num = elem.num + 1;\r\n                        }\r\n                        else if (board[elem.x][elem.y - 1].num == 1000) {\r\n                            _this.found = true;\r\n                            destination.num = elem.num + 1;\r\n                        }\r\n                    }\r\n                });\r\n                if (!this.found) {\r\n                    this.find(board, this.toCheck[0], destination, target);\r\n                }\r\n                else if (this.found) {\r\n                    this.reverse(board, destination, target);\r\n                    this.path.push(target);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Algorytm.prototype.reverse = function (board, dest, target) {\r\n        var x = dest.x;\r\n        var y = dest.y;\r\n        var next = true;\r\n        //console.log(dest)\r\n        if (board[x + 1]) {\r\n            if (next) {\r\n                if (dest.num - 1 == board[x + 1][y].num) {\r\n                    this.path.push(board[x + 1][y]);\r\n                    next = false;\r\n                    this.pathLength += 1;\r\n                    this.reverse(board, board[x + 1][y], target);\r\n                }\r\n            }\r\n        }\r\n        if (board[x - 1]) {\r\n            if (next) {\r\n                if (dest.num - 1 == board[x - 1][y].num) {\r\n                    this.path.push(board[x - 1][y]);\r\n                    next = false;\r\n                    this.pathLength += 1;\r\n                    this.reverse(board, board[x - 1][y], target);\r\n                }\r\n            }\r\n        }\r\n        if (board[x][y + 1]) {\r\n            if (next) {\r\n                if (dest.num - 1 == board[x][y + 1].num) {\r\n                    this.path.push(board[x][y + 1]);\r\n                    next = false;\r\n                    this.pathLength += 1;\r\n                    this.reverse(board, board[x][y + 1], target);\r\n                }\r\n            }\r\n        }\r\n        if (board[x][y - 1]) {\r\n            if (next) {\r\n                if (dest.num - 1 == board[x][y - 1].num) {\r\n                    this.path.push(board[x][y - 1]);\r\n                    next = false;\r\n                    this.pathLength += 1;\r\n                    this.reverse(board, board[x][y - 1], target);\r\n                }\r\n            }\r\n        }\r\n        if (!next) {\r\n            //console.log(this.path[1])\r\n        }\r\n        // console.log(\"path\")\r\n        // console.log(this.path.length)\r\n        // console.log(\"num\")\r\n        // console.log(dest.num)\r\n    };\r\n    Algorytm.prototype.getPath = function () {\r\n        return this.path;\r\n    };\r\n    Algorytm.prototype.isPath = function () {\r\n        //console.log(this.path)\r\n        if (this.path.length == 0) {\r\n            this.pathExist = false;\r\n        }\r\n        else {\r\n            this.pathExist = true;\r\n        }\r\n        return this.pathExist;\r\n    };\r\n    return Algorytm;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://kulki-2/./src/Algorytm.ts?");

/***/ }),

/***/ "./src/Ball.ts":
/*!*********************!*\
  !*** ./src/Ball.ts ***!
  \*********************/
/*! namespace exports */
/*! export ball [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ball\": () => /* binding */ ball\n/* harmony export */ });\nfunction ball(colors) {\r\n    var ball;\r\n    var color = colors[Math.floor(Math.random() * colors.length)];\r\n    ball = document.createElement(\"div\");\r\n    ball.className = \"ball\";\r\n    ball.style.backgroundColor = color;\r\n    return ball;\r\n}\r\n\n\n//# sourceURL=webpack://kulki-2/./src/Ball.ts?");

/***/ }),

/***/ "./src/Board.ts":
/*!**********************!*\
  !*** ./src/Board.ts ***!
  \**********************/
/*! namespace exports */
/*! export Board [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Board\": () => /* binding */ Board\n/* harmony export */ });\n/* harmony import */ var _Algorytm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Algorytm */ \"./src/Algorytm.ts\");\n/* harmony import */ var _Ball__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Ball */ \"./src/Ball.ts\");\n/* harmony import */ var _Zbijanie__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Zbijanie */ \"./src/Zbijanie.ts\");\n\r\n\r\n\r\nvar Board = /** @class */ (function () {\r\n    function Board() {\r\n        this.width = 9;\r\n        this.height = 9;\r\n        this.obstacles = 3;\r\n        this.numOfObstacles = 0;\r\n        this.board = [];\r\n        this.algorytm = new _Algorytm__WEBPACK_IMPORTED_MODULE_0__.Algorytm;\r\n        this.zbijanie = new _Zbijanie__WEBPACK_IMPORTED_MODULE_1__.Zbijanie;\r\n        this.punkty = 0;\r\n        this.zbite = false;\r\n        this.div = document.createElement(\"div\");\r\n        this.div.id = \"board\";\r\n        this.nextBalls = this.randomBalls();\r\n        this.createTable();\r\n    }\r\n    //@strajk\r\n    //@szydera\r\n    Board.prototype.createTable = function () {\r\n        console.log(\"Creating table\");\r\n        var self = this;\r\n        var table = document.createElement(\"table\");\r\n        var _loop_1 = function (w) {\r\n            this_1.board[w] = [];\r\n            var row = document.createElement(\"tr\");\r\n            var _loop_2 = function (h) {\r\n                var cell = document.createElement(\"td\");\r\n                cell.className = \"boardCell\";\r\n                row.appendChild(cell);\r\n                this_1.board[w][h] = { elem: cell, obstacle: false, x: w, y: h, num: undefined, color: undefined };\r\n                cell.onclick = function () {\r\n                    self.clickCell(self.board[w][h], event);\r\n                };\r\n                cell.onmouseenter = function () {\r\n                    self.hover(self.board[w][h]);\r\n                };\r\n            };\r\n            for (var h = 0; h < this_1.height; h++) {\r\n                _loop_2(h);\r\n            }\r\n            table.appendChild(row);\r\n        };\r\n        var this_1 = this;\r\n        for (var w = 0; w < this.width; w++) {\r\n            _loop_1(w);\r\n        }\r\n        this.div.appendChild(table);\r\n        document.body.appendChild(this.div);\r\n        this.createObstacles(this.obstacles);\r\n    };\r\n    Board.prototype.createObstacles = function (amount) {\r\n        var _this = this;\r\n        console.log(\"Creating obstacles\");\r\n        var creating = true;\r\n        var createdObstacles = 0;\r\n        var balls = this.nextBalls;\r\n        var i = 0;\r\n        document.getElementById(\"kulki\").innerHTML = \"\";\r\n        if (this.numOfObstacles + this.obstacles >= this.width * this.height) {\r\n            this.board.forEach(function (element) {\r\n                element.forEach(function (element2) {\r\n                    if (!element2.obstacle && i < 3) {\r\n                        element2.elem.appendChild(_this.nextBalls[i].cloneNode());\r\n                        element2.obstacle = true;\r\n                        element2.num = NaN;\r\n                        _this.numOfObstacles += 1;\r\n                        i += 1;\r\n                        var zbijanie = _this.zbijanie.bitka(_this.board, element2);\r\n                        if (zbijanie[0]) {\r\n                            _this.numOfObstacles -= zbijanie[1];\r\n                            _this.punkty += zbijanie[1];\r\n                            document.getElementById(\"punkty\").innerHTML = _this.punkty.toString();\r\n                        }\r\n                        if (_this.numOfObstacles == _this.width * _this.height) {\r\n                            alert(\"Gratulacje uzyskales \" + _this.punkty.toString() + \" punktów\");\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        else {\r\n            while (createdObstacles < amount) {\r\n                var x = Math.floor((Math.random() * this.width));\r\n                var y = Math.floor((Math.random() * this.height));\r\n                if (this.board[x][y].obstacle != true) {\r\n                    createdObstacles++;\r\n                    this.numOfObstacles += 1;\r\n                    var el = this.board[x][y];\r\n                    el.obstacle = true;\r\n                    el.num = NaN;\r\n                    el.elem.appendChild(this.nextBalls[i].cloneNode());\r\n                    i += 1;\r\n                    var zbijanie = this.zbijanie.bitka(this.board, el);\r\n                    if (zbijanie[0]) {\r\n                        this.numOfObstacles -= zbijanie[1];\r\n                        this.punkty += zbijanie[1];\r\n                        document.getElementById(\"punkty\").innerHTML = this.punkty.toString();\r\n                    }\r\n                    //el.elem.style.backgroundColor = \"black\"\r\n                }\r\n                if (this.numOfObstacles == this.width * this.height) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.nextBalls = this.randomBalls();\r\n        for (var i_1 = 0; i_1 < this.obstacles; i_1++) {\r\n            document.getElementById(\"kulki\").appendChild(this.nextBalls[i_1]);\r\n        }\r\n    };\r\n    Board.prototype.clickCell = function (clickedCell, event) {\r\n        var _this = this;\r\n        console.log(\"przed\");\r\n        console.log(clickedCell);\r\n        var otoczenie = 0;\r\n        if (clickedCell.x != 8 && clickedCell.x != 0) {\r\n            if (this.board[clickedCell.x + 1][clickedCell.y].obstacle) {\r\n                otoczenie += 1;\r\n            }\r\n            if (this.board[clickedCell.x - 1][clickedCell.y].obstacle) {\r\n                otoczenie += 1;\r\n            }\r\n            if (clickedCell.y != 8 && clickedCell.y != 0) {\r\n                if (this.board[clickedCell.x][clickedCell.y + 1].obstacle) {\r\n                    otoczenie += 1;\r\n                }\r\n                if (this.board[clickedCell.x][clickedCell.y - 1].obstacle) {\r\n                    otoczenie += 1;\r\n                }\r\n            }\r\n            else if (clickedCell.y == 8) {\r\n                otoczenie += 1;\r\n                if (this.board[clickedCell.x][clickedCell.y - 1].obstacle) {\r\n                    otoczenie += 1;\r\n                }\r\n            }\r\n            else if (clickedCell.y == 0) {\r\n                otoczenie += 1;\r\n                if (this.board[clickedCell.x][clickedCell.y + 1].obstacle) {\r\n                    otoczenie += 1;\r\n                }\r\n            }\r\n        }\r\n        else if (clickedCell.x == 8) {\r\n            otoczenie += 1;\r\n            if (this.board[clickedCell.x - 1][clickedCell.y].obstacle) {\r\n                otoczenie += 1;\r\n            }\r\n            if (clickedCell.y != 8 && clickedCell.y != 0) {\r\n                if (this.board[clickedCell.x][clickedCell.y + 1].obstacle) {\r\n                    otoczenie += 1;\r\n                }\r\n                if (this.board[clickedCell.x][clickedCell.y - 1].obstacle) {\r\n                    otoczenie += 1;\r\n                }\r\n            }\r\n            if (clickedCell.y == 8) {\r\n                otoczenie += 1;\r\n                if (this.board[clickedCell.x][clickedCell.y - 1].obstacle) {\r\n                    otoczenie += 1;\r\n                }\r\n            }\r\n            else if (clickedCell.y == 0) {\r\n                otoczenie += 1;\r\n                if (this.board[clickedCell.x][clickedCell.y + 1].obstacle) {\r\n                    otoczenie += 1;\r\n                }\r\n            }\r\n        }\r\n        else if (clickedCell.x == 0) {\r\n            otoczenie += 1;\r\n            if (clickedCell.y != 8 && clickedCell.y != 0) {\r\n                if (this.board[clickedCell.x][clickedCell.y + 1].obstacle) {\r\n                    otoczenie += 1;\r\n                }\r\n                if (this.board[clickedCell.x][clickedCell.y - 1].obstacle) {\r\n                    otoczenie += 1;\r\n                }\r\n            }\r\n            if (this.board[clickedCell.x + 1][clickedCell.y].obstacle) {\r\n                otoczenie += 1;\r\n            }\r\n            if (clickedCell.y == 8) {\r\n                otoczenie += 1;\r\n                if (this.board[clickedCell.x][clickedCell.y - 1].obstacle) {\r\n                    otoczenie += 1;\r\n                }\r\n            }\r\n            else if (clickedCell.y == 0) {\r\n                otoczenie += 1;\r\n                if (this.board[clickedCell.x][clickedCell.y + 1].obstacle) {\r\n                    otoczenie += 1;\r\n                }\r\n            }\r\n        }\r\n        console.log(otoczenie);\r\n        // if(!this.board[clickedCell.x+1][clickedCell.y].obstacle&&!this.board[clickedCell.x-1][clickedCell.y].obstacle&&\r\n        //     !this.board[clickedCell.x][clickedCell.y+1].obstacle&&!this.board[clickedCell.x][clickedCell.y-1].obstacle){\r\n        //         console.log(\"mozna\")\r\n        //     }\r\n        // else{\r\n        //     console.log(\"nie mozna\")\r\n        // }\r\n        if (this.target && this.destination == undefined && clickedCell.elem.children.length < 1 && this.getPath().length == clickedCell.num + 1) {\r\n            console.log(\"clickedCell\");\r\n            this.destination = clickedCell;\r\n            //console.log(this.destination)\r\n            this.destination.elem.style.backgroundColor = \"red\";\r\n            this.findWay(this.board, this.target, this.destination);\r\n            this.destination.obstacle = true;\r\n            this.destination.num = NaN;\r\n            this.target.obstacle = false;\r\n            //this.target.num = 0\r\n            if (this.target.elem.children.length > 0) {\r\n                var children = this.target.elem.children[0];\r\n                this.destination.elem.appendChild(children);\r\n            }\r\n            var zbijanie = this.zbijanie.bitka(this.board, this.destination);\r\n            if (zbijanie[0]) {\r\n                this.zbite = true;\r\n                this.numOfObstacles -= zbijanie[1];\r\n                this.punkty += zbijanie[1];\r\n                console.log(\"zbijanmie\");\r\n                console.log(zbijanie);\r\n                document.getElementById(\"punkty\").innerHTML = this.punkty.toString();\r\n            }\r\n            else {\r\n                this.zbite = false;\r\n            }\r\n            this.getPath().forEach(function (element) {\r\n                element.elem.style.backgroundColor = \"gray\";\r\n                setTimeout(function () {\r\n                    element.elem.style.backgroundColor = \"white\";\r\n                }, 100);\r\n            });\r\n            setTimeout(function () {\r\n                if (!_this.zbite) {\r\n                    _this.createObstacles(_this.obstacles);\r\n                }\r\n                _this.destination.elem.style.backgroundColor = \"white\";\r\n                //this.destination.num= NaN\r\n                _this.target = undefined;\r\n                _this.destination = undefined;\r\n            }, 100);\r\n        }\r\n        else if (this.target == undefined && clickedCell.elem.children.length == 1 && otoczenie != 4) {\r\n            this.target = clickedCell;\r\n            this.target.elem.style.backgroundColor = \"blue\";\r\n            //this.target.obstacle = false\r\n            //this.target.num = 0\r\n        }\r\n        else if (this.target == clickedCell) {\r\n            this.target.elem.style.backgroundColor = \"white\";\r\n            this.target.num = NaN;\r\n            this.target.obstacle = true;\r\n            this.target = undefined;\r\n            this.board.forEach(function (element) {\r\n                element.forEach(function (element2) {\r\n                    if (!isNaN(element2.num) && element2.num != 1000) {\r\n                        element2.num = 0;\r\n                        element2.elem.style.backgroundColor = \"white\";\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        else if (this.target && this.destination == undefined && clickedCell.elem.children.length == 1 && otoczenie != 4) {\r\n            console.log(\"przklikane\");\r\n            this.target.elem.style.backgroundColor = \"white\";\r\n            this.target.num = NaN;\r\n            this.target.obstacle = true;\r\n            this.target = undefined;\r\n            this.target = clickedCell;\r\n            this.target.elem.style.backgroundColor = \"blue\";\r\n        }\r\n        //console.log(this.target)\r\n        //console.log(this.destination)\r\n        console.log(\"po\");\r\n        console.log(clickedCell);\r\n        document.getElementById(\"punkty\").innerHTML = this.punkty.toString();\r\n    };\r\n    Board.prototype.hover = function (hoveredCell) {\r\n        var _this = this;\r\n        if (this.target && hoveredCell.elem.children.length < 1 && this.destination == undefined) {\r\n            this.findWay(this.board, this.target, hoveredCell);\r\n            //console.log(this.getPath().length)\r\n            //console.log(hoveredCell.num)\r\n            if (this.getPath().length == hoveredCell.num + 1) {\r\n                hoveredCell.elem.style.backgroundColor = \"red\";\r\n                this.getPath().forEach(function (element) {\r\n                    element.elem.style.backgroundColor = \"blue\";\r\n                });\r\n            }\r\n        }\r\n        else if (hoveredCell.elem.children.length == 1 && this.destination == undefined) {\r\n            this.board.forEach(function (element) {\r\n                element.forEach(function (element2) {\r\n                    if (!isNaN(element2.num) && element2.num != 1000 && element2 != _this.target) {\r\n                        element2.num = undefined;\r\n                        element2.elem.style.backgroundColor = \"white\";\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    };\r\n    Board.prototype.findWay = function (board, target, destination) {\r\n        this.algorytm.log(board, target, destination);\r\n    };\r\n    Board.prototype.getPath = function () {\r\n        return this.algorytm.getPath();\r\n    };\r\n    Board.prototype.randomBalls = function () {\r\n        var balls = [];\r\n        var colors = [\"#d9ccff\", \"#ccffff\", \"#ffccd9\", \"#ff8080\", \"#d9d9d9\", \"#ffd9b3\", \"#e6ff99\"];\r\n        for (var i = 0; i < this.obstacles; i++) {\r\n            balls.push((0,_Ball__WEBPACK_IMPORTED_MODULE_2__.ball)(colors));\r\n        }\r\n        return balls;\r\n    };\r\n    return Board;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://kulki-2/./src/Board.ts?");

/***/ }),

/***/ "./src/Zbijanie.ts":
/*!*************************!*\
  !*** ./src/Zbijanie.ts ***!
  \*************************/
/*! namespace exports */
/*! export Zbijanie [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Zbijanie\": () => /* binding */ Zbijanie\n/* harmony export */ });\nvar Zbijanie = /** @class */ (function () {\r\n    function Zbijanie() {\r\n    }\r\n    Zbijanie.prototype.bitka = function (board, target) {\r\n        console.log(target);\r\n        var zbite = false;\r\n        var punkty = 1;\r\n        var x = target.x;\r\n        var y = target.y;\r\n        var xToCheck = x;\r\n        var yToCheck = y;\r\n        var el = board[x][y].elem.children[0];\r\n        var color = el.style.backgroundColor;\r\n        var vert = 1;\r\n        var hor = 1;\r\n        var tlCross = 1;\r\n        var trCross = 1;\r\n        xToCheck = x + 1;\r\n        var vertStrike = [target];\r\n        var horStrike = [target];\r\n        var tlCrossStrike = [target];\r\n        var trCrossStrike = [target];\r\n        while (xToCheck < 9) {\r\n            var elToCheck = board[xToCheck][y].elem.children[0];\r\n            if (elToCheck) {\r\n                if (elToCheck.style.backgroundColor == color) {\r\n                    console.log(\"kulka w dol\");\r\n                    vertStrike.push(board[xToCheck][y]);\r\n                    xToCheck += 1;\r\n                    vert += 1;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        xToCheck = x - 1;\r\n        while (xToCheck >= 0) {\r\n            var elToCheck = board[xToCheck][y].elem.children[0];\r\n            if (elToCheck) {\r\n                if (elToCheck.style.backgroundColor == color) {\r\n                    console.log(\"kulka w gore\");\r\n                    vertStrike.push(board[xToCheck][y]);\r\n                    xToCheck -= 1;\r\n                    vert += 1;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        yToCheck = y + 1;\r\n        while (yToCheck < 9) {\r\n            var elToCheck = board[x][yToCheck].elem.children[0];\r\n            if (elToCheck) {\r\n                if (elToCheck.style.backgroundColor == color) {\r\n                    console.log(\"kulka w bok\");\r\n                    horStrike.push(board[x][yToCheck]);\r\n                    yToCheck += 1;\r\n                    hor += 1;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        yToCheck = y - 1;\r\n        while (yToCheck >= 0) {\r\n            var elToCheck = board[x][yToCheck].elem.children[0];\r\n            if (elToCheck) {\r\n                if (elToCheck.style.backgroundColor == color) {\r\n                    console.log(\"kulka w bok\");\r\n                    horStrike.push(board[x][yToCheck]);\r\n                    yToCheck -= 1;\r\n                    hor += 1;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        xToCheck = x + 1;\r\n        yToCheck = y + 1;\r\n        while (xToCheck < 9 && yToCheck < 9) {\r\n            var elToCheck = board[xToCheck][yToCheck].elem.children[0];\r\n            if (elToCheck) {\r\n                if (elToCheck.style.backgroundColor == color) {\r\n                    console.log(\"kulka w bok\");\r\n                    tlCrossStrike.push(board[xToCheck][yToCheck]);\r\n                    xToCheck += 1;\r\n                    yToCheck += 1;\r\n                    tlCross += 1;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        xToCheck = x - 1;\r\n        yToCheck = y - 1;\r\n        while (xToCheck >= 0 && yToCheck >= 0) {\r\n            var elToCheck = board[xToCheck][yToCheck].elem.children[0];\r\n            if (elToCheck) {\r\n                if (elToCheck.style.backgroundColor == color) {\r\n                    console.log(\"kulka w bok\");\r\n                    tlCrossStrike.push(board[xToCheck][yToCheck]);\r\n                    xToCheck -= 1;\r\n                    yToCheck -= 1;\r\n                    tlCross += 1;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        xToCheck = x + 1;\r\n        yToCheck = y - 1;\r\n        while (xToCheck < 9 && yToCheck >= 0) {\r\n            var elToCheck = board[xToCheck][yToCheck].elem.children[0];\r\n            if (elToCheck) {\r\n                if (elToCheck.style.backgroundColor == color) {\r\n                    console.log(\"kulka w bok\");\r\n                    trCrossStrike.push(board[xToCheck][yToCheck]);\r\n                    xToCheck += 1;\r\n                    yToCheck -= 1;\r\n                    trCross += 1;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        xToCheck = x - 1;\r\n        yToCheck = y + 1;\r\n        while (xToCheck >= 0 && yToCheck < 9) {\r\n            var elToCheck = board[xToCheck][yToCheck].elem.children[0];\r\n            if (elToCheck) {\r\n                if (elToCheck.style.backgroundColor == color) {\r\n                    console.log(\"kulka w bok\");\r\n                    trCrossStrike.push(board[xToCheck][yToCheck]);\r\n                    xToCheck -= 1;\r\n                    yToCheck += 1;\r\n                    trCross += 1;\r\n                }\r\n                else {\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (vert >= 3) {\r\n            vertStrike.forEach(function (element) {\r\n                console.log(element);\r\n                element.obstacle = false;\r\n                element.num = undefined;\r\n                element.elem.innerHTML = \"\";\r\n                zbite = true;\r\n            });\r\n            punkty += vertStrike.length - 1;\r\n        }\r\n        if (hor >= 3) {\r\n            horStrike.forEach(function (element) {\r\n                console.log(element);\r\n                element.obstacle = false;\r\n                element.num = undefined;\r\n                element.elem.innerHTML = \"\";\r\n                zbite = true;\r\n            });\r\n            punkty += horStrike.length - 1;\r\n        }\r\n        if (tlCross >= 3) {\r\n            tlCrossStrike.forEach(function (element) {\r\n                console.log(element);\r\n                element.obstacle = false;\r\n                element.num = undefined;\r\n                element.elem.innerHTML = \"\";\r\n                zbite = true;\r\n            });\r\n            punkty += tlCrossStrike.length - 1;\r\n        }\r\n        if (trCross >= 3) {\r\n            trCrossStrike.forEach(function (element) {\r\n                console.log(element);\r\n                element.obstacle = false;\r\n                element.num = undefined;\r\n                element.elem.innerHTML = \"\";\r\n                zbite = true;\r\n            });\r\n            punkty += trCrossStrike.length - 1;\r\n        }\r\n        console.log(\"kulki\");\r\n        console.log(\"vert: \" + vert);\r\n        console.log(vertStrike);\r\n        console.log(\"hor: \" + hor);\r\n        console.log(horStrike);\r\n        return ([zbite, punkty]);\r\n    };\r\n    Zbijanie.prototype.checkField = function (field) {\r\n    };\r\n    return Zbijanie;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://kulki-2/./src/Zbijanie.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Board__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Board */ \"./src/Board.ts\");\n\r\nvar Main = /** @class */ (function () {\r\n    function Main() {\r\n        new _Board__WEBPACK_IMPORTED_MODULE_0__.Board;\r\n    }\r\n    return Main;\r\n}());\r\nvar al = new Main;\r\n\n\n//# sourceURL=webpack://kulki-2/./src/main.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/main.ts");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;